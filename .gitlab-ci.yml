cache:
  paths:
  - vendor/

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  REPOSITORY: gitlab.toavalon.com:5000
  IMAGE: codename-nau/web/laravel
  TEST_TAG: $CI_COMMIT_REF_NAME
  RELEASE_TAG: latest

stages:
  - build
  - test
  - build_image
  - release
  - deploy

build:
  image: php:7.1-alpine
  stage: build
  script:
    - apk update
    - apk add git
    - git submodule sync --recursive
    - git submodule update --init --recursive
    - curl -sS https://getcomposer.org/installer | php -- --install-dir=./ --filename=composer
    - ./composer config -g github-oauth.github.com $GITHUB_KEY
    - ./composer install --no-interaction --optimize-autoloader --no-plugins --dev --no-progress
  artifacts:
    paths:
      - ./*

PHP_CodeSniffer:
  stage: test
  script:
    - vendor/bin/phpcs --standard=guidelines/phpcs.xml --ignore=/vendor,/database,/cache,/compiled,/public,*.blade.php,/bootstrap -w --colors --report-full=phpcs-report.txt --report-diff=phpcs-fix.diff --report-gitblame=phpcs-gitblame.txt --report-summary .
  artifacts:
    when: always
    paths:
      - phpcs-report.txt
      - phpcs-fix.diff
      - phpcs-gitblame.txt

PHPMD:
  stage: test
  script:
    - vendor/bin/phpmd . text ./guidelines/phpmd.xml --exclude vendor,database,cache,compiled,public --suffixes php --reportfile phpmd-report.txt --colors || (cat report.txt && false)
  artifacts:
    when: always
    paths:
      - phpmd-report.txt

Integrational Tests:
  image: php:7.1-alpine
  stage: test
  before_script:
    - apk update --quiet
    - apk add autoconf g++ gcc libc-dev make pkgconf --quiet --no-progress
    - pecl install xdebug
    - echo -e "zend_extension=$(find /usr -name xdebug.so)\n" >> /usr/local/etc/php/conf.d/xdebug.ini
    - php --version
  script:
    - ./.gitlab-prepare-for-tests.sh
    - mkdir coverage
    - echo "Run the tests"
    - php vendor/bin/phpunit --colors --coverage-html=./coverage --report-useless-tests --testdox-html=./testdox.html --whitelist=app --coverage-text

  artifacts:
    when: always
    paths:
      - coverage
      - testdox.html

build image:
  image: docker:latest
  services:
    - docker:dind
  stage: build_image
  tags:
    - docker
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $REPOSITORY
    - docker build --pull -t $REPOSITORY/$IMAGE:$TEST_TAG .
    - docker push $REPOSITORY/$IMAGE:$TEST_TAG
  only:
    - develop
    - master

release image:
  image: docker:latest
  services:
    - docker:dind
  stage: release
  tags:
    - docker
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $REPOSITORY
    - docker pull $REPOSITORY/$IMAGE:$TEST_TAG
    - docker tag $CONTAINER_TEST_IMAGE $REPOSITORY/$IMAGE:$RELEASE_TAG
    - docker push $REPOSITORY/$IMAGE:$RELEASE_TAG
  only:
    - master

develop deploy:
  stage: deploy
  image: gitlab/dind:latest
  only:
    - develop
  tags:
    - docker
  environment:
    name: develop
    url: nau.toavalon.com
  script:
    - which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY")
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - ssh deploy@dev.toavalon.com -p 665 "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $REPOSITORY"
    - ssh deploy@dev.toavalon.com -p 665 'WEB_PATH=/opt/nau/webbash -s' < deploy.sh -- $TEST_TAG

pages:
  stage: deploy
  dependencies:
    - Integrational Tests
  script:
    - mv public web_public
    - mv coverage public
    - cp testdox.html public/
  artifacts:
    paths:
      - public
  only:
    - develop
